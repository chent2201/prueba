AWSTemplateFormatVersion: '2010-09-09'

Description: AWS API gateway with a lambda integration

Resources:

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Proporties:
      ApiKeySourceType: HEADER
      Description: An Api gateway with labda
      EndpointConfiguration:
        Types:
          - EDGE
      Name: lambda-api

  ApiGatewayResource:
    Type: AWS:ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: 'lambda'
      RestApiId: !Ref ApiGatewayRestApi     

  ApiGatewayMethod: 
    Type: AWS::ApiGateway::Method
    Properties: 
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration: 
        ConnectionType: INTERNET
        Credentials: !GetAtt ApiGatewayIamRole.Arn
        IntegrationHttpMethod: POST
        PassthroughBehavior: WHEN_NO_MATCH
        TimeoutInMillis: 29000
        Type: AWS_PROXY
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      OperationName: 'lambda'
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: 'application/json'
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties: 
      DeploymentId: !Ref ApiGatewayDeployment
      Description: Lambda API Stage v0
      RestApiId: !Ref ApiGatewayRestApi
      StageName: 'v0'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties: 
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi
      
  ApiGatewayIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2021-6-29'
        Statement: 
          - Sid: ''
            Effect: 'Allow'
            Principal: 
              Service: 
                - 'apigateway.amazonaws.com'
              Action:
                - 'sts:AssumeRole'
      Path: '/'
      Policies:
        - PolicyName: LambdaAccess
          PolicyDocument:
            Version: '2021-6-29'
            Statement: 
            - Effect: 'Allow'
              Action: 'lambda:*'
              Resource: !GetAtt LambdaFunction.Arn

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          exports.handler = async (event) => {
            const response = {
              'statusCode:' 200,
              'body:' JSON.stringify('Hola mundo'),
            '};'
            return response;
            '}';

  LambdaIamRole:

